//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Project/InputActions/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace CIRC.Inputs
{
    public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""TouchScreen"",
            ""id"": ""225a8b32-d982-4fd3-a947-869231b19ad6"",
            ""actions"": [
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""3d65121a-76ee-4422-91c3-e9786cc21335"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecTouchPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2767caa0-f8fe-4c8d-859e-b6d06c9e4975"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Touch"",
                    ""type"": ""Button"",
                    ""id"": ""e8446b6d-1e9a-4f19-b5a0-fc12e2652071"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondTouch"",
                    ""type"": ""Button"",
                    ""id"": ""d39195c9-29e9-4c47-aed4-604a0839126c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DoubleTouch"",
                    ""type"": ""Button"",
                    ""id"": ""b7c2abbe-c6f8-4dcc-b681-8f81989f4e26"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Swipe"",
                    ""type"": ""Value"",
                    ""id"": ""7a51eba8-49ee-439d-a1b9-f54d5815625a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shake"",
                    ""type"": ""Value"",
                    ""id"": ""d2757f23-251d-46b7-aa97-5d9662d1e3ff"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c211d2d3-b97c-423a-9d3a-90f6ffd4cadb"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6271f67c-3ced-4d66-80b8-45245d1909f0"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69c9e8ce-7bfa-45a4-902b-b4ca900f4e4d"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e51c1a5b-022b-48b3-9f5f-3c107424921e"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoubleTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""2a76e680-2505-4e1e-a458-dc0069271f9a"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swipe"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""0494914c-770b-4c79-b258-0a48bdbc3e0a"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""8c0a3144-e679-4213-a438-4f47cd1a5626"",
                    ""path"": ""<Touchscreen>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b9aca77d-ed3c-43d9-9dfc-daf199ac57a8"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecTouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b7f606c-b83a-401f-b480-cbeb2a9cf257"",
                    ""path"": ""<Accelerometer>/acceleration"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // TouchScreen
            m_TouchScreen = asset.FindActionMap("TouchScreen", throwIfNotFound: true);
            m_TouchScreen_TouchPosition = m_TouchScreen.FindAction("TouchPosition", throwIfNotFound: true);
            m_TouchScreen_SecTouchPosition = m_TouchScreen.FindAction("SecTouchPosition", throwIfNotFound: true);
            m_TouchScreen_Touch = m_TouchScreen.FindAction("Touch", throwIfNotFound: true);
            m_TouchScreen_SecondTouch = m_TouchScreen.FindAction("SecondTouch", throwIfNotFound: true);
            m_TouchScreen_DoubleTouch = m_TouchScreen.FindAction("DoubleTouch", throwIfNotFound: true);
            m_TouchScreen_Swipe = m_TouchScreen.FindAction("Swipe", throwIfNotFound: true);
            m_TouchScreen_Shake = m_TouchScreen.FindAction("Shake", throwIfNotFound: true);
        }

        ~@PlayerInputActions()
        {
            UnityEngine.Debug.Assert(!m_TouchScreen.enabled, "This will cause a leak and performance issues, PlayerInputActions.TouchScreen.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // TouchScreen
        private readonly InputActionMap m_TouchScreen;
        private List<ITouchScreenActions> m_TouchScreenActionsCallbackInterfaces = new List<ITouchScreenActions>();
        private readonly InputAction m_TouchScreen_TouchPosition;
        private readonly InputAction m_TouchScreen_SecTouchPosition;
        private readonly InputAction m_TouchScreen_Touch;
        private readonly InputAction m_TouchScreen_SecondTouch;
        private readonly InputAction m_TouchScreen_DoubleTouch;
        private readonly InputAction m_TouchScreen_Swipe;
        private readonly InputAction m_TouchScreen_Shake;
        public struct TouchScreenActions
        {
            private @PlayerInputActions m_Wrapper;
            public TouchScreenActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @TouchPosition => m_Wrapper.m_TouchScreen_TouchPosition;
            public InputAction @SecTouchPosition => m_Wrapper.m_TouchScreen_SecTouchPosition;
            public InputAction @Touch => m_Wrapper.m_TouchScreen_Touch;
            public InputAction @SecondTouch => m_Wrapper.m_TouchScreen_SecondTouch;
            public InputAction @DoubleTouch => m_Wrapper.m_TouchScreen_DoubleTouch;
            public InputAction @Swipe => m_Wrapper.m_TouchScreen_Swipe;
            public InputAction @Shake => m_Wrapper.m_TouchScreen_Shake;
            public InputActionMap Get() { return m_Wrapper.m_TouchScreen; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TouchScreenActions set) { return set.Get(); }
            public void AddCallbacks(ITouchScreenActions instance)
            {
                if (instance == null || m_Wrapper.m_TouchScreenActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_TouchScreenActionsCallbackInterfaces.Add(instance);
                @TouchPosition.started += instance.OnTouchPosition;
                @TouchPosition.performed += instance.OnTouchPosition;
                @TouchPosition.canceled += instance.OnTouchPosition;
                @SecTouchPosition.started += instance.OnSecTouchPosition;
                @SecTouchPosition.performed += instance.OnSecTouchPosition;
                @SecTouchPosition.canceled += instance.OnSecTouchPosition;
                @Touch.started += instance.OnTouch;
                @Touch.performed += instance.OnTouch;
                @Touch.canceled += instance.OnTouch;
                @SecondTouch.started += instance.OnSecondTouch;
                @SecondTouch.performed += instance.OnSecondTouch;
                @SecondTouch.canceled += instance.OnSecondTouch;
                @DoubleTouch.started += instance.OnDoubleTouch;
                @DoubleTouch.performed += instance.OnDoubleTouch;
                @DoubleTouch.canceled += instance.OnDoubleTouch;
                @Swipe.started += instance.OnSwipe;
                @Swipe.performed += instance.OnSwipe;
                @Swipe.canceled += instance.OnSwipe;
                @Shake.started += instance.OnShake;
                @Shake.performed += instance.OnShake;
                @Shake.canceled += instance.OnShake;
            }

            private void UnregisterCallbacks(ITouchScreenActions instance)
            {
                @TouchPosition.started -= instance.OnTouchPosition;
                @TouchPosition.performed -= instance.OnTouchPosition;
                @TouchPosition.canceled -= instance.OnTouchPosition;
                @SecTouchPosition.started -= instance.OnSecTouchPosition;
                @SecTouchPosition.performed -= instance.OnSecTouchPosition;
                @SecTouchPosition.canceled -= instance.OnSecTouchPosition;
                @Touch.started -= instance.OnTouch;
                @Touch.performed -= instance.OnTouch;
                @Touch.canceled -= instance.OnTouch;
                @SecondTouch.started -= instance.OnSecondTouch;
                @SecondTouch.performed -= instance.OnSecondTouch;
                @SecondTouch.canceled -= instance.OnSecondTouch;
                @DoubleTouch.started -= instance.OnDoubleTouch;
                @DoubleTouch.performed -= instance.OnDoubleTouch;
                @DoubleTouch.canceled -= instance.OnDoubleTouch;
                @Swipe.started -= instance.OnSwipe;
                @Swipe.performed -= instance.OnSwipe;
                @Swipe.canceled -= instance.OnSwipe;
                @Shake.started -= instance.OnShake;
                @Shake.performed -= instance.OnShake;
                @Shake.canceled -= instance.OnShake;
            }

            public void RemoveCallbacks(ITouchScreenActions instance)
            {
                if (m_Wrapper.m_TouchScreenActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ITouchScreenActions instance)
            {
                foreach (var item in m_Wrapper.m_TouchScreenActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_TouchScreenActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public TouchScreenActions @TouchScreen => new TouchScreenActions(this);
        public interface ITouchScreenActions
        {
            void OnTouchPosition(InputAction.CallbackContext context);
            void OnSecTouchPosition(InputAction.CallbackContext context);
            void OnTouch(InputAction.CallbackContext context);
            void OnSecondTouch(InputAction.CallbackContext context);
            void OnDoubleTouch(InputAction.CallbackContext context);
            void OnSwipe(InputAction.CallbackContext context);
            void OnShake(InputAction.CallbackContext context);
        }
    }
}
